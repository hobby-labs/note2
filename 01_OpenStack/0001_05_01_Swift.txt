= Swift のインストール =
; Object Storage Install Guide
: https://docs.openstack.org/swift/zed/install/

Object Storage のSwift をインストールしていきます。

== Object Storage 概要 ==
: Object Storage service overview
; https://docs.openstack.org/swift/zed/install/get_started.html

OpenStack Object Storage はmulti-tenant オブジェクトストレージシステムです。
スケーラブルで、REST API で、構成されていない大容量データを管理することができます。  
  
== 含まれているコンポーネント ==

=== Proxy servers (swift-proxy-server) ===
OpenStack Object Storage API を受け付け、ファイルアップロード、変更、コンテナ作成のためのHTTP リクエストを取り扱います。
また、Web ブラウザにファイルとコンテナの一覧を提供します。
パフォーマンスを上げるために、memcached でキャッシュをすることもできます。

=== Account servers (swift-account-server) ===
Object Storage で定義されたアカウントを管理します。

=== Container servers (swift-container-server) ===
Object Storage 内のコンテナやフォルダのマッピングを管理します。

=== Object servers (swift-object-server) ===
ストレージノードの、ファイルのような、実際のオブジェクトを管理します。

=== Various periodic processes ===
巨大なデータストアの維持管理タスクを行います。
例えば、replication services は、クラスタを通して一貫性と可用性の確認をします。
その他のeriodic processes としては、auditors, updaters, reapers 等があります。

=== WSGI middleware ===
認証を取り扱います。

=== swift client ===
コマンドラインを通じて、REST API を実行します。

=== swift-init ===
リングファイル、パラメータによるデーモン名を初期化します。
https://docs.openstack.org/swift/latest/admin_guide.html#managing-services

=== swift-recon ===
swift-recon ミドルウェアによって取得された、クラスタに関する様々なメトリクス、テレメトリ(パフォーマンス)データを取得するCLI ツールです。

=== swift-ring-builder ===
ユーティリティをビルドして、リバランスします。

= Network 設定 =
: Configure networking
; https://docs.openstack.org/swift/zed/install/environment-networking.html

割愛。

= Controller ノードへのインストールと設定 =
: Install and configure the controller node
; https://docs.openstack.org/swift/zed/install/controller-install.html

= Controller ノードの設定(Ubuntu) =
: Install and configure the controller node for Ubuntu
; https://docs.openstack.org/swift/zed/install/controller-install-ubuntu.html

コンテナやStorage ノードのオブジェクトサービスリクエストを取り扱う、プロキシサービスのインストールと設定について、説明していきます。

== 事前要求 ==
Proxy サービスは、Identity サービスとして認証と認可のメカニズムに依存します。
これは、他のサービスとは異なり、他のOpenStack サービスなしで操作できるようにする内部メカニズムを要求します。
Object Storage サービスを設定する前に、サービス認証情報とAPI エンドポイントを作成する必要があります。  

また補足として、Object Storage サービスはSQL DB を使用しません。
代わりに、それぞれのStorage ノードに分散されたSQLite DB を使用します。

== 認証情報の作成とエンドポイント作成 ==

<syntaxhighlight lang="console">
openstack-controller-nodeXX ~# . ./admin-openrc
</syntaxhighlight>

<syntaxhighlight lang="console">
openstack-controller-nodeXX ~# openstack user create --domain default --password secret swift
+---------------------+----------------------------------+
| Field               | Value                            |
+---------------------+----------------------------------+
| domain_id           | default                          |
| enabled             | True                             |
| id                  | ffffffffffffffffffffffffffffffff |
| name                | swift                            |
| options             | {}                               |
| password_expires_at | None                             |
+---------------------+----------------------------------+

openstack-controller-nodeXX ~# openstack role add --project service --user swift admin

openstack-controller-nodeXX ~# openstack service create --name swift \
                                   --description "OpenStack Object Storage" object-store
+-------------+----------------------------------+
| Field       | Value                            |
+-------------+----------------------------------+
| description | OpenStack Object Storage         |
| enabled     | True                             |
| id          | ffffffffffffffffffffffffffffffff |
| name        | swift                            |
| type        | object-store                     |
+-------------+----------------------------------+
</syntaxhighlight>

<syntaxhighlight lang="console">
openstack-controller-nodeXX ~# openstack endpoint create --region RegionOne \
                                   object-store public http://dev-controller01:8080/v1/AUTH_%\(project_id\)s
+--------------+-----------------------------------------------------+
| Field        | Value                                               |
+--------------+-----------------------------------------------------+
| enabled      | True                                                |
| id           | ffffffffffffffffffffffffffffffff                    |
| interface    | public                                              |
| region       | RegionOne                                           |
| region_id    | RegionOne                                           |
| service_id   | ffffffffffffffffffffffffffffffff                    |
| service_name | swift                                               |
| service_type | object-store                                        |
| url          | http://dev-controller01:8080/v1/AUTH_%(project_id)s |
+--------------+-----------------------------------------------------+

openstack-controller-nodeXX ~# openstack endpoint create --region RegionOne \
                                   object-store internal http://dev-controller01:8080/v1/AUTH_%\(project_id\)s
+--------------+-----------------------------------------------------+
| Field        | Value                                               |
+--------------+-----------------------------------------------------+
| enabled      | True                                                |
| id           | ffffffffffffffffffffffffffffffff                    |
| interface    | internal                                            |
| region       | RegionOne                                           |
| region_id    | RegionOne                                           |
| service_id   | ffffffffffffffffffffffffffffffff                    |
| service_name | swift                                               |
| service_type | object-store                                        |
| url          | http://dev-controller01:8080/v1/AUTH_%(project_id)s |
+--------------+-----------------------------------------------------+

openstack-controller-nodeXX ~# openstack endpoint create --region RegionOne \
                                   object-store admin http://dev-controller01:8080/v1
+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | ffffffffffffffffffffffffffffffff |
| interface    | admin                            |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | ffffffffffffffffffffffffffffffff |
| service_name | swift                            |
| service_type | object-store                     |
| url          | http://dev-controller01:8080/v1  |
+--------------+----------------------------------+
</syntaxhighlight>

// Snapshot swift_created_endpoint

== コンポーネントのインストールと設定 ==

<syntaxhighlight lang="console">
openstack-controller-nodeXX ~# apt-get install swift swift-proxy python3-swiftclient \
                                   python3-keystoneclient python3-keystonemiddleware memcached

openstack-controller-nodeXX ~# curl -o /etc/swift/proxy-server.conf https://opendev.org/openstack/swift/raw/branch/master/etc/proxy-server.conf-sample
</syntaxhighlight>

<code>/etc/swift/proxy-server.conf</code> ファイルを編集します。<br /><br />
<code>pipeline</code> は、<code>tempurl</code>, <code>tempauth</code> を削除し、<code>authtoken</code>, <code>keystoneauth</code> を追加します。
順序は変えないようにしてください。

* /etc/swift/proxy-server.conf @ dev-controller01
<syntaxhighlight lang="text">
[DEFAULT]
# ...
bind_port = 8080
user = swift
swift_dir = /etc/swift
# ...
[pipeline:main]
pipeline = catch_errors gatekeeper healthcheck proxy-logging cache listing_formats container_sync bulk ratelimit authtoken keystoneauth copy container-quotas account-quotas slo dlo versioned_writes symlink proxy-logging proxy-server
# ...
[app:proxy-server]
use = egg:swift#proxy
account_autocreate = True
# ...
[filter:keystoneauth]
use = egg:swift#keystoneauth
operator_roles = admin,user
# ...
[filter:authtoken]
paste.filter_factory = keystonemiddleware.auth_token:filter_factory

www_authenticate_uri = http://dev-controller01:5000
auth_url = http://dev-controller01:5000
memcached_servers = dev-controller01:11211
auth_type = password
project_domain_id = default
user_domain_id = default
project_name = service
username = swift
password = secret
delay_auth_decision = True
# ...
[filter:cache]
use = egg:swift#memcache
memcache_servers = dev-controller01:11211
</syntaxhighlight>

// Snapshot swift_configure_proxy_server

= Storage ノードの設定 =
; Install and configure the storage nodes
: https://docs.openstack.org/swift/yoga/install/storage-install.html

== Storage ノードの設定(Ubuntu) ==
; Install and configure the storage nodes for Ubuntu and Debian
: https://docs.openstack.org/swift/yoga/install/storage-install-ubuntu-debian.html

アカウント、コンテナ、サービスを操作するためのStorage ノードのインストールと設定を行います。



