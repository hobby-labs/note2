= Swift のインストール =
; Object Storage Install Guide
: https://docs.openstack.org/swift/zed/install/

Object Storage のSwift をインストールしていきます。

== Object Storage 概要 ==
: Object Storage service overview
; https://docs.openstack.org/swift/zed/install/get_started.html

OpenStack Object Storage はmulti-tenant オブジェクトストレージシステムです。
スケーラブルで、REST API で、構成されていない大容量データを管理することができます。  
  
== 含まれているコンポーネント ==

=== Proxy servers (swift-proxy-server) ===
OpenStack Object Storage API を受け付け、ファイルアップロード、変更、コンテナ作成のためのHTTP リクエストを取り扱います。
また、Web ブラウザにファイルとコンテナの一覧を提供します。
パフォーマンスを上げるために、memcached でキャッシュをすることもできます。

=== Account servers (swift-account-server) ===
Object Storage で定義されたアカウントを管理します。

=== Container servers (swift-container-server) ===
Object Storage 内のコンテナやフォルダのマッピングを管理します。

=== Object servers (swift-object-server) ===
ストレージノードの、ファイルのような、実際のオブジェクトを管理します。

=== Various periodic processes ===
巨大なデータストアの維持管理タスクを行います。
例えば、replication services は、クラスタを通して一貫性と可用性の確認をします。
その他のeriodic processes としては、auditors, updaters, reapers 等があります。

=== WSGI middleware ===
認証を取り扱います。

=== swift client ===
コマンドラインを通じて、REST API を実行します。

=== swift-init ===
リングファイル、パラメータによるデーモン名を初期化します。
https://docs.openstack.org/swift/latest/admin_guide.html#managing-services

=== swift-recon ===
swift-recon ミドルウェアによって取得された、クラスタに関する様々なメトリクス、テレメトリ(パフォーマンス)データを取得するCLI ツールです。

=== swift-ring-builder ===
ユーティリティをビルドして、リバランスします。

= Network 設定 =
: Configure networking
; https://docs.openstack.org/swift/zed/install/environment-networking.html

割愛。

= Controller ノードへのインストールと設定 =
: Install and configure the controller node
; https://docs.openstack.org/swift/zed/install/controller-install.html

= Controller ノードの設定(Ubuntu) =
: Install and configure the controller node for Ubuntu
; https://docs.openstack.org/swift/zed/install/controller-install-ubuntu.html

コンテナやStorage ノードのオブジェクトサービスリクエストを取り扱う、プロキシサービスのインストールと設定について、説明していきます。

== 事前要求 ==
Proxy サービスは、Identity サービスとして認証と認可のメカニズムに依存します。
これは、他のサービスとは異なり、他のOpenStack サービスなしで操作できるようにする内部メカニズムを要求します。
Object Storage サービスを設定する前に、サービス認証情報とAPI エンドポイントを作成する必要があります。  

また補足として、Object Storage サービスはSQL DB を使用しません。
代わりに、それぞれのStorage ノードに分散されたSQLite DB を使用します。

== 認証情報の作成とエンドポイント作成 ==

<syntaxhighlight lang="console">
dev-controllerXX ~# . ./admin-openrc
</syntaxhighlight>

<syntaxhighlight lang="console">
dev-controllerXX ~# openstack user create --domain default --password secret swift
+---------------------+----------------------------------+
| Field               | Value                            |
+---------------------+----------------------------------+
| domain_id           | default                          |
| enabled             | True                             |
| id                  | ffffffffffffffffffffffffffffffff |
| name                | swift                            |
| options             | {}                               |
| password_expires_at | None                             |
+---------------------+----------------------------------+

dev-controllerXX ~# openstack role add --project service --user swift admin

dev-controllerXX ~# openstack service create --name swift \
                                   --description "OpenStack Object Storage" object-store
+-------------+----------------------------------+
| Field       | Value                            |
+-------------+----------------------------------+
| description | OpenStack Object Storage         |
| enabled     | True                             |
| id          | ffffffffffffffffffffffffffffffff |
| name        | swift                            |
| type        | object-store                     |
+-------------+----------------------------------+
</syntaxhighlight>

<syntaxhighlight lang="console">
dev-controllerXX ~# openstack endpoint create --region RegionOne \
                                   object-store public http://dev-controller01:8080/v1/AUTH_%\(project_id\)s
+--------------+-----------------------------------------------------+
| Field        | Value                                               |
+--------------+-----------------------------------------------------+
| enabled      | True                                                |
| id           | ffffffffffffffffffffffffffffffff                    |
| interface    | public                                              |
| region       | RegionOne                                           |
| region_id    | RegionOne                                           |
| service_id   | ffffffffffffffffffffffffffffffff                    |
| service_name | swift                                               |
| service_type | object-store                                        |
| url          | http://dev-controller01:8080/v1/AUTH_%(project_id)s |
+--------------+-----------------------------------------------------+

dev-controllerXX ~# openstack endpoint create --region RegionOne \
                                   object-store internal http://dev-controller01:8080/v1/AUTH_%\(project_id\)s
+--------------+-----------------------------------------------------+
| Field        | Value                                               |
+--------------+-----------------------------------------------------+
| enabled      | True                                                |
| id           | ffffffffffffffffffffffffffffffff                    |
| interface    | internal                                            |
| region       | RegionOne                                           |
| region_id    | RegionOne                                           |
| service_id   | ffffffffffffffffffffffffffffffff                    |
| service_name | swift                                               |
| service_type | object-store                                        |
| url          | http://dev-controller01:8080/v1/AUTH_%(project_id)s |
+--------------+-----------------------------------------------------+

dev-controllerXX ~# openstack endpoint create --region RegionOne \
                                   object-store admin http://dev-controller01:8080/v1
+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | ffffffffffffffffffffffffffffffff |
| interface    | admin                            |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | ffffffffffffffffffffffffffffffff |
| service_name | swift                            |
| service_type | object-store                     |
| url          | http://dev-controller01:8080/v1  |
+--------------+----------------------------------+
</syntaxhighlight>

// Snapshot swift_created_endpoint

== コンポーネントのインストールと設定 ==

<syntaxhighlight lang="console">
dev-controllerXX ~# apt-get install -y swift swift-proxy python3-swiftclient \
                                   python3-keystoneclient python3-keystonemiddleware memcached

dev-controllerXX ~# curl -o /etc/swift/proxy-server.conf https://opendev.org/openstack/swift/raw/branch/master/etc/proxy-server.conf-sample
</syntaxhighlight>

<code>/etc/swift/proxy-server.conf</code> ファイルを編集します。<br /><br />
<code>pipeline</code> は、<code>tempurl</code>, <code>tempauth</code> を削除し、<code>authtoken</code>, <code>keystoneauth</code> を追加します。
順序は変えないようにしてください。

* /etc/swift/proxy-server.conf @ dev-controller01
<syntaxhighlight lang="text">
[DEFAULT]
# ...
bind_port = 8080
user = swift
swift_dir = /etc/swift
# ...
[pipeline:main]
pipeline = catch_errors gatekeeper healthcheck proxy-logging cache listing_formats container_sync bulk ratelimit authtoken keystoneauth copy container-quotas account-quotas slo dlo versioned_writes symlink proxy-logging proxy-server
# ...
[app:proxy-server]
use = egg:swift#proxy
account_autocreate = True
# ...
[filter:keystoneauth]
use = egg:swift#keystoneauth
operator_roles = admin,user
# ...
[filter:authtoken]
paste.filter_factory = keystonemiddleware.auth_token:filter_factory

www_authenticate_uri = http://dev-controller01:5000
auth_url = http://dev-controller01:5000
memcached_servers = dev-controller01:11211
auth_type = password
project_domain_id = default
user_domain_id = default
project_name = service
username = swift
password = secret
delay_auth_decision = True
# ...
[filter:cache]
use = egg:swift#memcache
memcache_servers = dev-controller01:11211
</syntaxhighlight>

// Snapshot swift_configure_proxy_server

= Storage ノードの設定 =
; Install and configure the storage nodes
: https://docs.openstack.org/swift/yoga/install/storage-install.html

== Storage ノードの設定(Ubuntu) ==
; Install and configure the storage nodes for Ubuntu and Debian
: https://docs.openstack.org/swift/yoga/install/storage-install-ubuntu-debian.html

アカウント、コンテナ、サービスを操作するためのStorage ノードのインストールと設定を行います。
今回は、説明を簡略化するために、2 台のStorage ノードがあり、2 つの空のローカルブロックストレージデバイス<code>/dev/sdb</code>, <code>/dev/sdc</code>があることを想定しています。<br /><br />

Object Storage は、拡張属性(Extended attribute: xattr)各種ファイルシステムのあるファイルシステムをサポートしています。
その中でも、よくテストされてパフォーマンスが良いのは<code>xfs</code> です。<br /><br />

水平展開に関する情報はDeployment Guide を参照してください。
; Deployment Guide
: https://docs.openstack.org/swift/latest/deployment_guide.html

== 事前準備 ==

<syntaxhighlight lang="console">
dev-storageXX ~# apt-get install xfsprogs rsync

dev-storageXX ~# mkfs.xfs /dev/vdb
dev-storageXX ~# mkfs.xfs /dev/vdc

dev-storageXX ~# mkdir -p /srv/node/vd{b,c}

dev-storageXX ~# output_blkid="$(blkid)"
dev-storageXX ~# uuid_vdb=$(grep -P '^/dev/vdb:.*' <<< "${output_blkid}" | sed -e 's/.* UUID="\([a-z0-9\-]\+\).*" .*/\1/g')
dev-storageXX ~# uuid_vdc=$(grep -P '^/dev/vdc:.*' <<< "${output_blkid}" | sed -e 's/.* UUID="\([a-z0-9\-]\+\).*" .*/\1/g')
dev-storageXX ~# echo "uuid_vdb=${uuid_vdb}, uuid_vdc=${uuid_vdc}"
dev-storageXX ~# echo "UUID=\"${uuid_vdb}\" /srv/node/vdb xfs noatime 0 2" >> /etc/fstab
dev-storageXX ~# echo "UUID=\"${uuid_vdc}\" /srv/node/vdc xfs noatime 0 2" >> /etc/fstab
dev-storageXX ~# cat /etc/fstab

dev-storageXX ~# mount /srv/node/vdb
dev-storageXX ~# mount /srv/node/vdc
</syntaxhighlight>

rsyncd サービスの設定を行います。
<code>/etc/rsyncd.conf</code> ファイルを編集、無い場合は新規作成し、下記のように設定します。

* dev-storageXX
<syntaxhighlight lang="console">
dev-storageXX ~# # 今回は"enp2s0" がmanagement network に属しているインタフェースと仮定します。
dev-storageXX ~# management_ip=$(ip -f inet addr show enp2s0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')
dev-storageXX ~# echo $management_ip

dev-storageXX ~# cat << EOF > /etc/rsyncd.conf
uid = swift
gid = swift
log file = /var/log/rsyncd.log
pid file = /var/run/rsyncd.pid
address = ${management_ip}

[account]
max connections = 2
path = /srv/node/
read only = False
lock file = /var/lock/account.lock

[container]
max connections = 2
path = /srv/node/
read only = False
lock file = /var/lock/container.lock

[object]
max connections = 2
path = /srv/node/
read only = False
lock file = /var/lock/object.lock
EOF

dev-storageXX ~# cat /etc/rsyncd.conf

dev-storageXX ~# sed -i -e 's/^RSYNC_ENABLE=.*/RSYNC_ENABLE=true/g' /etc/default/rsync
dev-storageXX ~# cat /etc/default/rsync

dev-storageXX ~# systemctl restart rsync.service
dev-storageXX ~# systemctl enable rsync.service
</syntaxhighlight>

// Snapshot swift_rsync_configured

== コンポーネントのインストールと設定 ==

<syntaxhighlight lang="console">
dev-storageXX ~# apt-get install -y swift swift-account swift-container swift-object
</syntaxhighlight>

accounting, container, object service の設定ファイルを、公式リポジトリから取得します。

<syntaxhighlight lang="console">
dev-storageXX ~# curl -o /etc/swift/account-server.conf https://opendev.org/openstack/swift/raw/branch/master/etc/account-server.conf-sample
dev-storageXX ~# curl -o /etc/swift/container-server.conf https://opendev.org/openstack/swift/raw/branch/master/etc/container-server.conf-sample
dev-storageXX ~# curl -o /etc/swift/object-server.conf https://opendev.org/openstack/swift/raw/branch/master/etc/object-server.conf-sample
</syntaxhighlight>

<code>account-server.conf</code> 設定ファイルを編集します。
<code>MANAGEMENT_INTERFACE_IP_ADDRESS</code> は、各storage ノードのmanagement セグメントのIP を設定してください。
<code>[pipeline:main]</code> で指定する、その他のモジュールについては、Deployment Guide を参照してください。

; Deployment Guide
: https://docs.openstack.org/swift/latest/deployment_guide.html

* /etc/swift/account-server.conf @ dev-storageXX
<syntaxhighlight lang="text">
[DEFAULT]
bind_ip = MANAGEMENT_INTERFACE_IP_ADDRESS
bind_port = 6202
user = swift
swift_dir = /etc/swift
devices = /srv/node
mount_check = True

# ...

[pipeline:main]
pipeline = healthcheck recon account-server

# ...

[filter:recon]
use = egg:swift#recon
recon_cache_path = /var/cache/swift
</syntaxhighlight>

* /etc/swift/container-server.conf @ dev-storageXX
<syntaxhighlight lang="text">
[DEFAULT]
bind_ip = MANAGEMENT_INTERFACE_IP_ADDRESS
bind_port = 6201
user = swift
swift_dir = /etc/swift
devices = /srv/node
mount_check = True

# ...

[pipeline:main]
pipeline = healthcheck recon container-server

# ...

[filter:recon]
use = egg:swift#recon
recon_cache_path = /var/cache/swift
</syntaxhighlight>

* /etc/swift/object-server.conf @ dev-storageXX
<syntaxhighlight lang="text">
[DEFAULT]
bind_ip = MANAGEMENT_INTERFACE_IP_ADDRESS
bind_port = 6200
user = swift
swift_dir = /etc/swift
devices = /srv/node
mount_check = True

# ...

[pipeline:main]
pipeline = healthcheck recon object-server

# ...

[filter:recon]
use = egg:swift#recon
recon_cache_path = /var/cache/swift
recon_lock_path = /var/lock
</syntaxhighlight>

設定ファイルを変更したら、各ファイルとディレクトリの権限を設定します。

<syntaxhighlight lang="console">
dev-storageXX ~# chown -R swift:swift /srv/node

dev-storageXX ~# mkdir -p /var/cache/swift
dev-storageXX ~# chown -R root:swift /var/cache/swift
dev-storageXX ~# chmod -R 775 /var/cache/swift
</syntaxhighlight>

// Snapshot swift_configure_component

= Ring の作成と初期化 =
; Create and distribute initial rings
: https://docs.openstack.org/swift/yoga/install/initial-rings.html

Object storage サービスを開始する前に、初期アカウント、コンテナ、Object Ring を作成する必要があります。
Ring builder はストレージアーキテクチャを利用するための設定ファイルを作成します。

== Account ring の作成 ==

<syntaxhighlight lang="console">
dev-controllerXX ~# cd /etc/swift
dev-controllerXX ~# swift-ring-builder account.builder create 10 3 1
</syntaxhighlight>

各ノードをリングに追加します。
コマンドの書式としては、下記のようになります。

* (例)
<syntaxhighlight lang="console">
dev-controllerXX ~# swift-ring-builder account.builder \
                        add --region 1 --zone 1 --ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS --port 6202 \
                        --device DEVICE_NAME --weight DEVICE_WEIGHT
</syntaxhighlight>

上記コマンドの<code>STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS</code> には、Storage ノードのIP アドレスを指定します。
<code>DEVICE_NAME</code> にはデバイス名を指定します(vdb, vdc etc...)。
<code>DEVICE_WEIGHT</code> には、そのデバイスが、リング内の他のデバイスに対して、占める使用量を指定します。<br /><br />

今回は、既に作成したStorage ノードの都合上、下記のコマンドになります。

<syntaxhighlight lang="console">
dev-controllerXX ~# swift-ring-builder account.builder \
                        add --region 1 --zone 1 --ip 172.22.1.101 --port 6202 \
                        --device vdb --weight 100
> Device d0r1z1-172.22.1.101:6202R172.22.1.101:6202/vdb_"" with 100.0 weight got id 0
dev-controllerXX ~# swift-ring-builder account.builder \
                        add --region 1 --zone 1 --ip 172.22.1.101 --port 6202 \
                        --device vdc --weight 100
> Device d1r1z1-172.22.1.101:6202R172.22.1.101:6202/vdc_"" with 100.0 weight got id 1
dev-controllerXX ~# swift-ring-builder account.builder \
                        add --region 1 --zone 1 --ip 172.22.1.102 --port 6202 \
                        --device vdb --weight 100
> Device d2r1z1-172.22.1.102:6202R172.22.1.102:6202/vdb_"" with 100.0 weight got id 2
dev-controllerXX ~# swift-ring-builder account.builder \
                        add --region 1 --zone 1 --ip 172.22.1.102 --port 6202 \
                        --device vdc --weight 100
> Device d3r1z1-172.22.1.102:6202R172.22.1.102:6202/vdc_"" with 100.0 weight got id 3
</syntaxhighlight>

ring 状態を確認します。

<syntaxhighlight lang="console">
dev-controllerXX ~# swift-ring-builder account.builder
> account.builder, build version 4, id 02470c1e024942a588802d0a919fd6b0
> 1024 partitions, 3.000000 replicas, 1 regions, 1 zones, 4 devices, 100.00 balance, 0.00 dispersion
> The minimum number of hours before a partition can be reassigned is 1 (0:00:00 remaining)
> The overload factor is 0.00% (0.000000)
> Ring file account.ring.gz not found, probably it hasn't been written yet
> Devices:   id region zone   ip address:port replication ip:port  name weight partitions balance flags meta
>             0      1    1 172.22.1.101:6202   172.22.1.101:6202   vdb 100.00          0 -100.00
>             1      1    1 172.22.1.101:6202   172.22.1.101:6202   vdc 100.00          0 -100.00
>             2      1    1 172.22.1.102:6202   172.22.1.102:6202   vdb 100.00          0 -100.00
>             3      1    1 172.22.1.102:6202   172.22.1.102:6202   vdc 100.00          0 -100.00
</syntaxhighlight>

Ring のリバランスを行います。

<syntaxhighlight lang="console">
dev-controllerXX ~# swift-ring-builder account.builder rebalance
> Reassigned 3072 (300.00%) partitions. Balance is now 0.00.  Dispersion is now 0.00
</syntaxhighlight>

// Snapshot swift_created_account_ring

== Container ring の作成 ==

<syntaxhighlight lang="console">
dev-controllerXX ~# cd /etc/swift
dev-controllerXX ~# swift-ring-builder container.builder create 10 3 1
dev-controllerXX ~# ls -l container.builder
-rw-r--r-- 1 root root 2504 Nov  8 14:36 container.builder
</syntaxhighlight>

Ring にStorage ノードを追加します。
コマンドの例としては、下記の通りです。

* (例)
<syntaxhighlight lang="console">
dev-controllerXX ~# swift-ring-builder container.builder \
                        add --region 1 --zone 1 --ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS --port 6201 \
                        --device DEVICE_NAME --weight DEVICE_WEIGHT
</syntaxhighlight>

<code>STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS</code> は、各Storage ノードのManagement IP アドレスです。
<code>DEVICE_NAME</code> は、Storage ノードのデバイス名です。<br /><br />

今回の構成では、実際に打つコマンドは、下記のようなコマンドになります。

<syntaxhighlight lang="console">
dev-controllerXX ~# swift-ring-builder container.builder add \
                        --region 1 --zone 1 --ip 172.22.1.101 --port 6201 --device vdb --weight 100
Device d0r1z1-172.22.1.101:6201R172.22.1.101:6201/vdb_"" with 100.0 weight got id 0

dev-controllerXX ~# swift-ring-builder container.builder add \
                        --region 1 --zone 1 --ip 172.22.1.101 --port 6201 --device vdc --weight 100
Device d1r1z1-172.22.1.101:6201R172.22.1.101:6201/vdc_"" with 100.0 weight got id 1

dev-controllerXX ~# swift-ring-builder container.builder add \
                        --region 1 --zone 2 --ip 172.22.1.102 --port 6201 --device vdb --weight 100
Device d2r1z2-172.22.1.102:6201R172.22.1.102:6201/vdb_"" with 100.0 weight got id 2

dev-controllerXX ~# swift-ring-builder container.builder add \
                        --region 1 --zone 2 --ip 172.22.1.102 --port 6201 --device vdc --weight 100
Device d3r1z2-172.22.1.102:6201R172.22.1.102:6201/vdc_"" with 100.0 weight got id 3
</syntaxhighlight>

Container ring の検証を行います。

<syntaxhighlight lang="console">
dev-controllerXX ~# swift-ring-builder container.builder
container.builder, build version 4, id 0e7694a3dbfd46c3ab24c210802b938b
1024 partitions, 3.000000 replicas, 1 regions, 2 zones, 4 devices, 100.00 balance, 0.00 dispersion
The minimum number of hours before a partition can be reassigned is 1 (0:00:00 remaining)
The overload factor is 0.00% (0.000000)
Ring file container.ring.gz not found, probably it hasn't been written yet
Devices:   id region zone   ip address:port replication ip:port  name weight partitions balance flags meta
            0      1    1 172.22.1.101:6201   172.22.1.101:6201   vdb 100.00          0 -100.00
            1      1    1 172.22.1.101:6201   172.22.1.101:6201   vdc 100.00          0 -100.00
            2      1    2 172.22.1.102:6201   172.22.1.102:6201   vdb 100.00          0 -100.00
            3      1    2 172.22.1.102:6201   172.22.1.102:6201   vdc 100.00          0 -100.00
</syntaxhighlight>

<syntaxhighlight lang="console">
dev-controllerXX ~# swift-ring-builder container.builder rebalance
Reassigned 3072 (300.00%) partitions. Balance is now 0.00.  Dispersion is now 0.00
</syntaxhighlight>

// Snapshot swift_created_container_ring

== Object ring 作成 ==
Object serve は、ローカルデバイス上のオブジェクトロケーションリストを管理するために、Object ring を使います。

<syntaxhighlight lang="console">
dev-controllerXX ~# cd /etc/swift
dev-controllerXX ~# swift-ring-builder object.builder create 10 3 1
</syntaxhighlight>

Ring にStorage ノードを追加します。
コマンドの例としては、下記の通りです。

* (例)
<syntaxhighlight lang="console">
dev-controllerXX ~# swift-ring-builder object.builder \
                        add --region 1 --zone 1 --ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS --port 6200 \
                        --device DEVICE_NAME --weight DEVICE_WEIGHT
</syntaxhighlight>

<code>STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS</code> は、各Storage ノードのManagement IP アドレスです。
<code>DEVICE_NAME</code> は、Storage ノードのデバイス名です。<br /><br />


<syntaxhighlight lang="console">
dev-controllerXX ~# swift-ring-builder object.builder add \
                        --region 1 --zone 1 --ip 172.22.1.101 --port 6200 --device vdb --weight 100
Device d0r1z1-172.22.1.101:6200R172.22.1.101:6200/vdb_"" with 100.0 weight got id 0

dev-controllerXX ~# swift-ring-builder object.builder add \
                        --region 1 --zone 1 --ip 172.22.1.101 --port 6200 --device vdc --weight 100
Device d1r1z1-172.22.1.101:6200R172.22.1.101:6200/vdc_"" with 100.0 weight got id 1

dev-controllerXX ~# swift-ring-builder object.builder add \
                        --region 1 --zone 2 --ip 172.22.1.102 --port 6200 --device vdb --weight 100
Device d2r1z2-172.22.1.102:6200R172.22.1.102:6200/vdb_"" with 100.0 weight got id 2

dev-controllerXX ~# swift-ring-builder object.builder add \
                        --region 1 --zone 2 --ip 172.22.1.102 --port 6200 --device vdc --weight 100
Device d3r1z2-172.22.1.102:6200R172.22.1.102:6200/vdc_"" with 100.0 weight got id 3
</syntaxhighlight>

<syntaxhighlight lang="console">
dev-controllerXX ~# swift-ring-builder object.builder
> object.builder, build version 4, id 11854677f1224ce8b5ed4f7110e13c94
> 1024 partitions, 3.000000 replicas, 1 regions, 2 zones, 4 devices, 100.00 balance, 0.00 dispersion
> The minimum number of hours before a partition can be reassigned is 1 (0:00:00 remaining)
> The overload factor is 0.00% (0.000000)
> Ring file object.ring.gz not found, probably it hasn't been written yet
> Devices:   id region zone   ip address:port replication ip:port  name weight partitions balance flags meta
>             0      1    1 172.22.1.101:6200   172.22.1.101:6200   vdb 100.00          0 -100.00
>             1      1    1 172.22.1.101:6200   172.22.1.101:6200   vdc 100.00          0 -100.00
>             2      1    2 172.22.1.102:6200   172.22.1.102:6200   vdb 100.00          0 -100.00
>             3      1    2 172.22.1.102:6200   172.22.1.102:6200   vdc 100.00          0 -100.00
</syntaxhighlight>

Ring をリバランスします。

<syntaxhighlight lang="console">
dev-controllerXX ~# swift-ring-builder object.builder rebalance
> Reassigned 3072 (300.00%) partitions. Balance is now 0.00.  Dispersion is now 0.00
</syntaxhighlight>

== internal-client.conf ファイルの準備 ==
; swift-init all start throws error for missing config
: https://bugs.launchpad.net/swift/+bug/1986723

<syntaxhighlight lang="console">
dev-storageXX # curl -o /etc/swift/internal-client.conf https://opendev.org/openstack/swift/raw/branch/master/etc/internal-client.conf-sample
</syntaxhighlight>

=== Ring ファイルの配布 ===
<code>/etc/swift</code> ディレクトリ下の<code>account.ring.gz</code>, <code>container.ring.gz</code>, <code>object.ring.gz</code> ファイルを各Storage ノードとStorage Proxy ノードにコピーしてください。

// Snapshot swift_created_object_ring

= インストールの後処理 =
; Finalize installation
: https://docs.openstack.org/swift/yoga/install/finalize-installation.html

; Finalize installation for Ubuntu and Debian
: https://docs.openstack.org/swift/yoga/install/finalize-installation-ubuntu-debian.html

<syntaxhighlight lang="console">
dev-controllerXX ~# curl -o /etc/swift/swift.conf \
                        https://opendev.org/openstack/swift/raw/branch/master/etc/swift.conf-sample
</syntaxhighlight>

* /etc/swift/swift.conf @ dev-controllerXX, dev-storageXX
<syntaxhighlight lang="console">
[swift-hash]
swift_hash_path_suffix = HASH_PATH_SUFFIX
swift_hash_path_prefix = HASH_PATH_PREFIX

# ...

[storage-policy:0]
name = Policy-0
default = yes
</syntaxhighlight>

<code>HASH_PATH_SUFFIX</code>, <code>HASH_PATH_PREFIX</code> はユニークな値を設定してください。
これらの値は、漏洩しないように且つ、なくさないようにしてください。<br /><br />

<code>storage-policy:0</code> には、デフォルトのStorage ポリシーを設定してください。<br /><br />

設定が完了したら、この設定ファイルを各swift-proxy-server を起動しているノードと、storage ノードにコピーしてください。
今回は、<code>dev-controller01</code>, <code>dev-storage01</code>, <code>dev-storage02</code> になります。<br /><br />

== 権限設定 ==
ファイルをコピーしたら、権限を設定します。

<syntaxhighlight lang="console">
dev-(controller|storage)XX ~# chown -R root:swift /etc/swift
</syntaxhighlight>

<code>controller</code> ノード(<code>swift-proxy</code> ノード)上でサービスを再起動します。

<syntaxhighlight lang="console">
dev-controllerXX ~# systemctl restart memcached
dev-controllerXX ~# systemctl restart swift-proxy
</syntaxhighlight>

<code>storage</code> ノード上でObject Storage サービスを起動します。

<syntaxhighlight lang="console">
dev-storageXX ~# swift-init all start
</syntaxhighlight>

=== systemd サービス名 ===
systemd コマンドで管理したい場合は、<code>/lib/systemd/system</code> ディレクトリ配下を確認すると良いでしょう。<br />
→実際にsystemd で実行していない。未検証

<syntaxhighlight lang="console">
dev-storage01 # ls /lib/systemd/system | grep -P '^swift(?!.*\@).*'
swift-account-auditor.service
swift-account-reaper.service
swift-account-replicator.service
swift-account.service
swift-container-auditor.service
swift-container-reconciler.service
swift-container-replicator.service
swift-container-sharder.service
swift-container-sync.service
swift-container-updater.service
swift-container.service
swift-object-auditor.service
swift-object-reconstructor.service
swift-object-replicator.service
swift-object-updater.service
swift-object.service
</syntaxhighlight>

// Snapshot swift_finalized_installation

== 検証 ==
: Verify operation
; https://docs.openstack.org/swift/yoga/install/verify.html

Object storage の検証を実施していきます。

<syntaxhighlight lang="console">
dev-controller01 # . ./admin-openrc
</syntaxhighlight>

swift サービスのステータスを確認します。

<syntaxhighlight lang="console">
dev-controller01 # swift stat
               Account: AUTH_ffffffffffffffffffffffffffffffff
            Containers: 0
               Objects: 0
                 Bytes: 0
          Content-Type: text/plain; charset=utf-8
           X-Timestamp: 1668341073.39333
       X-Put-Timestamp: 1668341073.39333
                  Vary: Accept
            X-Trans-Id: eeeeeeeeeeeeeeeeeeeeeee-eeeeeeeeee
X-Openstack-Request-Id: eeeeeeeeeeeeeeeeeeeeeee-eeeeeeeeee
</syntaxhighlight>

container1 コンテナを作成します。

<syntaxhighlight lang="console">
dev-controller01 # openstack container create container1
+---------------------------------------+------------+------------------------------------+
| account                               | container  | x-trans-id                         |
+---------------------------------------+------------+------------------------------------+
| AUTH_ffffffffffffffffffffffffffffffff | container1 | eeeeeeeeeeeeeeeeeeeeeee-eeeeeeeeee |
+---------------------------------------+------------+------------------------------------+
</syntaxhighlight>

container1 コンテナにテストファイルをアップロードします。

<syntaxhighlight lang="console">
dev-controller01 # echo "This is a test file" > test.txt
dev-controller01 # openstack object create container1 test.txt
+----------+------------+----------------------------------+
| object   | container  | etag                             |
+----------+------------+----------------------------------+
| test.txt | container1 | dddddddddddddddddddddddddddddddd |
+----------+------------+----------------------------------+
</syntaxhighlight>

container1 コンテナのファイルを一覧表示します。

<syntaxhighlight lang="console">
dev-controller01 # openstack object list container1
+----------+
| Name     |
+----------+
| test.txt |
+----------+
</syntaxhighlight>

<syntaxhighlight lang="console">
dev-controller01 # openstack object save container1 test.txt
dev-controller01 # cat test.txt
This is a test file
</syntaxhighlight>

