# Prepareing ubuntu for building cloud image.

## Run ipxe-boot

```
git clone https://github.com/TsutomuNakamura/ipxe-boot.git
cd ipxe-boot
docker-compose up

# It will take several minutes to run the containers.
```

```
mkdir -p /var/kvm/distros/ubuntu2204
virt-install \
  --name ubuntu2204 \
  --boot uefi \
  --pxe \
  --ram 32768 \
  --os-variant=ubuntu22.04 \
  --disk /var/kvm/distros/ubuntu2204/disk.img,size=128,bus=virtio,format=qcow2 \
  --network bridge=br0
```

* /etc/netplan/00-installer-config.yaml
```
network:
  ethernets:
    enp1s0:
      dhcp4: false
      dhcp6: false
      addresses:
      - 172.31.99.2/16
      routes:
      - to: default
        via: 172.31.0.1
      nameservers:
        addresses: [172.31.0.1, 8.8.8.8, 8.8.4.4]
  version: 2
```

# Prepare variables
```
APT_CACHE_SERVER="172.31.0.11"
#ORIGIN_NAME="vm-controller"
#ORIGIN_NAME="vm-compute"
ORIGIN_NAME="vm-storage"
CODE_NAME="jammy"
if [ "${ORIGIN_NAME}" = "vm-controller" -o "${ORIGIN_NAME}" = "vm-storage" ]; then
    SEEK_SIZE="34359738368"
elif [ "${ORIGIN_NAME}" = "vm-compute" ]; then
    SEEK_SIZE="68719476736"
fi

echo "APT_CACHE_SERVER=${APT_CACHE_SERVER}, ORIGIN_NAME=${ORIGIN_NAME}, CODE_NAME=${CODE_NAME}, SEEK_SIZE=${SEEK_SIZE}"
```

# Prepare to use apt cache proxy
```
cat << EOF > /etc/apt/apt.conf.d/01proxy
Acquire::HTTP::Proxy "http://${APT_CACHE_SERVER}:3142";
Acquire::HTTPS::Proxy "false";
EOF

cat /etc/apt/apt.conf.d/01proxy
apt-get update
```

# Installing necessary packages to build cloud image

[cloud-image-ubuntu-from-scratch](https://github.com/mvallim/cloud-image-ubuntu-from-scratch)
```
DEBIAN_FRONTEND=noninteractive sudo apt-get -y update
DEBIAN_FRONTEND=noninteractive sudo apt-get -y install \
   debootstrap \
   qemu-utils \
   qemu-system \
   genisoimage
```

## Disk Layout and declaring variables
### vm-controller
```
# Device,                                Mountpoint, Size,    Filesystem, Description
# /dev/vda1                              /boot/efi:  512MiB,  vfat,       -
# /dev/vda2                              /boot:      512MiB,  ext4,       -
# /dev/vda3                              lvm-vg01:   (31GiB), (LVM),      LVM Group for 
# /dev/mapper/lvm--vg01-lvm--vg01--log,  /var/log:   4GiB,    xfs,        An area to stor logs
# /dev/mapper/lvm--vg01-lvm--vg01--root, /:          27GiB,   xfs,        An area to stor logs
```

### vm-compute
```
# Device,                                Mountpoint, Size,    Filesystem, Description
# /dev/vda1                              /boot/efi:  512MiB,  vfat,       -
# /dev/vda2                              /boot:      512MiB,  ext4,       -
# /dev/vda3,4...                         lvm-vg01:   (63GiB), (LVM),      This area consists of multiple devices.
# /dev/mapper/lvm--vg01-lvm--vg01--log,  /var/log:   4GiB,    xfs,        -
# /dev/mapper/lvm--vg01-lvm--vg01--root, /:          59GiB,   xfs,        -
```

### vm-storage
```
# Device,                                Mountpoint, Size,    Filesystem, Description
# /dev/vda1,                             /boot/efi,  512MiB,  vfat,       -
# /dev/vda2,                             /boot,      512MiB,  ext4,       -
# /dev/vda3,                             -,          4GiB,    (LVM),      An empty area of Swift
# /dev/vda4,                             -,          4GiB,    (LVM),      An empty area of Ceph
# /dev/vda5,                             -,          4GiB,    (LVM),      An empty area of Ceph
# /dev/vda6,7...                         lvm-vg01:   (18GiB), (LVM),      -
# /dev/mapper/lvm--vg01-lvm--vg01--log,  /var/log:   4GiB,    xfs,        -
# /dev/mapper/lvm--vg01-lvm--vg01--root, /:          14GiB,   xfs,        -
```

## Create empty raw disk image

```
rm -rf $HOME/cloud-image-ubuntu-from-scratch && mkdir $HOME/cloud-image-ubuntu-from-scratch
cd $HOME/cloud-image-ubuntu-from-scratch
dd if=/dev/zero of=${ORIGIN_NAME}.raw bs=1 count=0 seek=${SEEK_SIZE} status=progress
```

```
sgdisk -z ${ORIGIN_NAME}.raw
sgdisk -n 1:0:+512M -t 1:ef00 -c 1:"EFI System" ${ORIGIN_NAME}.raw
sgdisk -n 2:0:+512M -t 2:8300 -c 2:"Linux filesystem" ${ORIGIN_NAME}.raw

if [ "${ORIGIN_NAME}" = "vm-storage" ]; then
    # Swift (5GiB)
    sgdisk -n 3:0:+4G  -t 3:8300 -c 3:"LVM for Swift" ${ORIGIN_NAME}.raw
    # Ceph (9GiB)
    sgdisk -n 4:0:+4G  -t 4:8300 -c 4:"LVM for Ceph" ${ORIGIN_NAME}.raw
    # Ceph (13GiB)
    sgdisk -n 5:0:+4G  -t 5:8300 -c 5:"LVM for Ceph" ${ORIGIN_NAME}.raw
    # LVM (25GiB)
    sgdisk -n 6:0:     -t 6:8300 -c 6:"Linux LVM" ${ORIGIN_NAME}.raw
else
    sgdisk -n 3:0: -t 3:8e00 -c 3:"Linux LVM" ${ORIGIN_NAME}.raw
fi
```

```
sudo losetup -fP ${ORIGIN_NAME}.raw
sudo losetup -a | grep ${ORIGIN_NAME}.raw

L_DEV=$(losetup -a | grep -P "/vm-.*\.raw" | cut -d ':' -f 1)
[ -z "${L_DEV}" ] && {
    echo "Failed to get loop device"
    exit 1
}
echo "Obtained name of device is \"${L_DEV}\""
```

In this example, the loop device was created as /dev/loop3.
Set the variable L_DEV=/dev/loop3.

```
sudo gdisk -l ${L_DEV}
> ...
> Number  Start (sector)    End (sector)  Size       Code  Name
>    1            2048         1050623   512.0 MiB   EF00  EFI System
>    2         1050624         2099199   512.0 MiB   8300  Linux filesystem
>    3         2099200        54237190   24.9 GiB    8E00  Linux LVM

ls -l ${L_DEV}*
> brw-rw---- 1 root disk   7, 4 Mar 18 14:46 /dev/loop3
> brw-rw---- 1 root disk 259, 0 Mar 18 14:46 /dev/loop3p1
> brw-rw---- 1 root disk 259, 1 Mar 18 14:46 /dev/loop3p2
> brw-rw---- 1 root disk 259, 2 Mar 18 14:46 /dev/loop3p3
```

```
mkfs.vfat -F32 ${L_DEV}p1
mkfs.ext4 ${L_DEV}p2
if [ "${ORIGIN_NAME}" = "vm-storage" ]; then
    # ${L_DEV}p3: Swift (+4GiB)
    # ${L_DEV}p4: Ceph 01 (+4GiB)
    # ${L_DEV}p5: Ceph 02 (+4GiB)
    pvcreate          ${L_DEV}p6
    vgcreate lvm-vg01 ${L_DEV}p6
    lvcreate -L 4G -n lvm-vg01-log lvm-vg01                # An logging area of VMs           (4GiB)
    lvcreate -l 100%FREE -n lvm-vg01-root lvm-vg01         # An area for storing VMs          (59GiB)
    mkfs.xfs /dev/lvm-vg01/lvm-vg01-log
    mkfs.xfs /dev/lvm-vg01/lvm-vg01-root
else
    pvcreate          ${L_DEV}p3
    vgcreate lvm-vg01 ${L_DEV}p3
    lvcreate -L 4G -n lvm-vg01-log lvm-vg01
    lvcreate -l 100%FREE -n lvm-vg01-root lvm-vg01
    mkfs.xfs /dev/lvm-vg01/lvm-vg01-log
    mkfs.xfs /dev/lvm-vg01/lvm-vg01-root
fi
```

```
cd $HOME/cloud-image-ubuntu-from-scratch
mkdir -p chroot
sudo mount /dev/lvm-vg01/lvm-vg01-root chroot/
sudo mkdir -p chroot/var/log
sudo mount /dev/lvm-vg01/lvm-vg01-log chroot/var/log
sudo mkdir -p chroot/boot
sudo mount ${L_DEV}p2 chroot/boot
sudo mkdir -p chroot/boot/efi
sudo mount ${L_DEV}p1 chroot/boot/efi
```

```
mkdir -p /var/debootstrap-cache
sudo debootstrap \
    --cache-dir=/var/debootstrap-cache \
    --arch=amd64 \
    --variant=minbase \
    --components "main,universe" \
    --include "ca-certificates,cron,iptables,isc-dhcp-client,libnss-myhostname,ntp,ntpdate,rsyslog,ssh,sudo,dialog,whiptail,man-db,curl,dosfstools,e2fsck-static,lvm2" \
    ${CODE_NAME} \
    $HOME/cloud-image-ubuntu-from-scratch/chroot \
    http://jp.archive.ubuntu.com/ubuntu/
```

```
sudo mount --rbind /dev $HOME/cloud-image-ubuntu-from-scratch/chroot/dev
sudo mount --rbind /run $HOME/cloud-image-ubuntu-from-scratch/chroot/run
sudo mount --rbind /sys $HOME/cloud-image-ubuntu-from-scratch/chroot/sys
sudo mount --rbind /proc $HOME/cloud-image-ubuntu-from-scratch/chroot/proc
```

```
sudo chroot $HOME/cloud-image-ubuntu-from-scratch/chroot \
    /usr/bin/env L_DEV=${L_DEV} ORIGIN_NAME=${ORIGIN_NAME} CODE_NAME=${CODE_NAME} APT_CACHE_SERVER="${APT_CACHE_SERVER}" \
    /bin/bash --login
```

```
cat << EOF > /etc/apt/apt.conf.d/01proxy
Acquire::HTTP::Proxy "http://${APT_CACHE_SERVER}:3142";
Acquire::HTTPS::Proxy "false";
EOF

cat /etc/apt/apt.conf.d/01proxy
apt-get update
```

```
export HOME=/root
export LC_ALL=C
```

```
echo "anonymous" > /etc/hostname
```

```
cat << EOF > /etc/apt/sources.list
deb http://jp.archive.ubuntu.com/ubuntu/ ${CODE_NAME} main restricted universe multiverse
deb-src http://jp.archive.ubuntu.com/ubuntu/ ${CODE_NAME} main restricted universe multiverse

deb http://jp.archive.ubuntu.com/ubuntu/ ${CODE_NAME}-security main restricted universe multiverse
deb-src http://jp.archive.ubuntu.com/ubuntu/ ${CODE_NAME}-security main restricted universe multiverse

deb http://jp.archive.ubuntu.com/ubuntu/ ${CODE_NAME}-updates main restricted universe multiverse
deb-src http://jp.archive.ubuntu.com/ubuntu/ ${CODE_NAME}-updates main restricted universe multiverse
EOF
```

```
blkid ${L_DEV}*
> /dev/loop4: PTUUID="d471d62d-07a6-40b7-a83a-bb36f44fbf22" PTTYPE="gpt"
> /dev/loop4p1: UUID="7BEB-2EAE" BLOCK_SIZE="512" TYPE="vfat" PARTLABEL="EFI System" PARTUUID="18597a4c-eac5-48be-b549-348a037b45ac"
> /dev/loop4p2: UUID="0e136ee5-6434-42bf-a564-c873bcdc4603" BLOCK_SIZE="4096" TYPE="ext4" PARTLABEL="Linux filesystem" PARTUUID="4b55f371-f39a-45a6-8b07-c89214a86d33"
> /dev/loop4p3: UUID="28OUVO-lK8G-KHGh-sGb1-jbdX-cXgY-7ErR8w" TYPE="LVM2_member" PARTLABEL="Linux LVM" PARTUUID="d9fbc565-5d65-4f50-9c54-a0096fb4682b"

blkid /dev/mapper/lvm--vg01-lvm--vg01*
/dev/mapper/lvm--vg01-lvm--vg01--log: UUID="4a9214f8-0fe0-40f4-92bd-c6eaf205ff82" BLOCK_SIZE="512" TYPE="xfs"
/dev/mapper/lvm--vg01-lvm--vg01--root: UUID="8b874506-97d1-40fa-a15a-5680cf45d441" BLOCK_SIZE="512" TYPE="xfs"
```

```
cat << EOF > /etc/fstab
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system>         <mount point>   <type>  <options>                       <dump>  <pass>

UUID="8b874506-97d1-40fa-a15a-5680cf45d441" / xfs rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,noquota        0 1
UUID="0e136ee5-6434-42bf-a564-c873bcdc4603" /boot ext4 rw,relatime     0 2
UUID="7BEB-2EAE"       /boot/efi       vfat    rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro   0 2
UUID="4a9214f8-0fe0-40f4-92bd-c6eaf205ff82" /var/log xfs rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,noquota        0 1
EOF
```

```
apt-get update
DEBIAN_FRONTEND=noninteractive apt-get install -y systemd-sysv
```

```
dbus-uuidgen > /etc/machine-id
ln -fs /etc/machine-id /var/lib/dbus/machine-id
```

```
dpkg-divert --local --rename --add /sbin/initctl
ln -s /bin/true /sbin/initctl
```

```
DEBIAN_FRONTEND=noninteractive apt-get install -y \
    xfsprogs os-prober ifupdown \
    network-manager resolvconf locales \
    build-essential module-assistant cloud-init \
    grub2 grub-pc linux-generic
```

```
cat <<EOF > /etc/network/interfaces
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback
EOF
```

Set locale.

```
# https://serverfault.com/a/689947
echo "Asia/Tokyo" > /etc/timezone
dpkg-reconfigure -f noninteractive tzdata

sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
sed -i -e 's/# ja_JP.UTF-8 UTF-8/ja_JP.UTF-8 UTF-8/' /etc/locale.gen
dpkg-reconfigure --frontend=noninteractive locales
update-locale LANG=en_US.UTF-8
```

```
dpkg-reconfigure resolvconf -f noninteractive
```

```
cat <<EOF > /etc/NetworkManager/NetworkManager.conf
[main]
rc-manager=resolvconf
plugins=ifupdown,keyfile
dns=default

[ifupdown]
managed=false
EOF
```

```
dpkg-reconfigure network-manager -f noninteractive
```

```
apt-get install -y grub-efi
grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ubuntu --boot-directory=/boot/efi/EFI --recheck
grub-mkconfig -o /boot/efi/EFI/grub/grub.cfg
##update-initramfs -u
sync
```

```
### # This user for testing
#useradd ubuntu
#usermod -aG sudo ubuntu
#passwd ubuntu
```

Finished to prepare resources for the cloud image.
Following this instruction, we will create the cloud image(qcow2) from the raw image.

```
rm -f /etc/apt/apt.conf.d/01proxy && apt-get update
truncate -s 0 /etc/machine-id
rm /sbin/initctl
dpkg-divert --rename --remove /sbin/initctl

apt-get clean
rm -rf /tmp/* ~/.bash_history
export HISTSIZE=0
exit
```

Chroot environment was finished.

```
sudo mount --make-rslave $HOME/cloud-image-ubuntu-from-scratch/chroot/
sudo umount -R $HOME/cloud-image-ubuntu-from-scratch/chroot/
sudo losetup -D
```

Convert raw to qcow2.

```
qemu-img convert -f raw ${ORIGIN_NAME}.raw -O qcow2 ${ORIGIN_NAME}.qcow2
```

# Testing
```
---------------------------------------------------
# controller
#CATEGORY="controller"
#CATEGORY="compute"
CATEGORY="storage"
sudo mkdir -p /var/kvm/distros/stg-${CATEGORY}01 && cd /var/kvm/distros/stg-${CATEGORY}01
scp ubuntu-server:/root/cloud-image-ubuntu-from-scratch/vm-${CATEGORY}.qcow2 /tmp/ && sudo mv /tmp/vm-${CATEGORY}.qcow2 /var/kvm/distros/stg-${CATEGORY}01/
sudo virt-install --name stg-${CATEGORY}01 --boot uefi --ram 16384 \
  --os-variant=ubuntu22.04 \
  --disk /var/kvm/distros/stg-${CATEGORY}01/vm-${CATEGORY}.qcow2,size=32,bus=virtio,format=qcow2 \
  --graphics vnc,port=5901,listen=127.0.0.1,password=changeme \
  --network bridge=br0 --import
virsh destroy stg-${CATEGORY}01 && virsh undefine stg-${CATEGORY}01 --nvram && rm -rf /var/kvm/distros/stg-${CATEGORY}01
---------------------------------------------------
```

```
grub> ls
> (proc) (memdisk) (hd0) (hd0,gpt3) (ht0,gpt2) (hd0,gpt1) (lvm/lvm--vg01-lvm--vg01--root) (lvm/lvm--vg01-lvm--vg01--log)

grub> ls -l (hd0,gpt2)/
> ...
> vmlinuz-5.15-0-101-generic
> initrd.img-5.15.0-101-generic
> ...

grub> insmod lvm
grub> ##set root=(lvm/lvm--vg01-lvm--vg01--root)
grub> ##linux (hd0,gpt2)/vmlinuz-5.15.0-101-generic root=/dev/mapper/lvm--vg01-lvm--vg01--root
grub> ## probe --fs-uuid lvm/lvm--vg01-lvm--vg01--root
grub> linux (hd0,gpt2)/vmlinuz-5.15.0-101-generic root=UUID=05d7611d-e724-44d1-8ea7-bc64babadbcb
grub> initrd (hd0,gpt2)/initrd.img-5.15.0-101-generic
grub> boot
```

